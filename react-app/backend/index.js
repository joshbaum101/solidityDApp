require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const MongoClient = require("mongodb").MongoClient;
const { Web3 } = require("web3");
const HDWalletProvider = require("@truffle/hdwallet-provider");
const { INFURA_API_KEY, MNEMONIC } = process.env;
const abi = require("./abi/abi");

const app = express();
const port = process.env.PORT || 5000;
const url =
  "mongodb+srv://joshbaum101:460Tlz9w@cluster0.s3f1r.mongodb.net/?retryWrites=true&w=majority";
const dbName = "cryptoRaiser";
const mnemonic = MNEMONIC;
const infuraKey = INFURA_API_KEY;
const fundraiserByteCode =
  "0x608060405234801562000010575f80fd5b5060405162000ec438038062000ec4833981810160405281019062000036919062000266565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600190816200008691906200052b565b5081600290816200009891906200052b565b50806003819055505050506200060f565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200010a82620000c2565b810181811067ffffffffffffffff821117156200012c576200012b620000d2565b5b80604052505050565b5f62000140620000a9565b90506200014e8282620000ff565b919050565b5f67ffffffffffffffff82111562000170576200016f620000d2565b5b6200017b82620000c2565b9050602081019050919050565b5f5b83811015620001a75780820151818401526020810190506200018a565b5f8484015250505050565b5f620001c8620001c28462000153565b62000135565b905082815260208101848484011115620001e757620001e6620000be565b5b620001f484828562000188565b509392505050565b5f82601f830112620002135762000212620000ba565b5b815162000225848260208601620001b2565b91505092915050565b5f819050919050565b62000242816200022e565b81146200024d575f80fd5b50565b5f81519050620002608162000237565b92915050565b5f805f6060848603121562000280576200027f620000b2565b5b5f84015167ffffffffffffffff811115620002a0576200029f620000b6565b5b620002ae86828701620001fc565b935050602084015167ffffffffffffffff811115620002d257620002d1620000b6565b5b620002e086828701620001fc565b9250506040620002f38682870162000250565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200034c57607f821691505b60208210810362000362576200036162000307565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620003c67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000389565b620003d2868362000389565b95508019841693508086168417925050509392505050565b5f819050919050565b5f620004136200040d62000407846200022e565b620003ea565b6200022e565b9050919050565b5f819050919050565b6200042e83620003f3565b620004466200043d826200041a565b84845462000395565b825550505050565b5f90565b6200045c6200044e565b6200046981848462000423565b505050565b5b818110156200049057620004845f8262000452565b6001810190506200046f565b5050565b601f821115620004df57620004a98162000368565b620004b4846200037a565b81016020851015620004c4578190505b620004dc620004d3856200037a565b8301826200046e565b50505b505050565b5f82821c905092915050565b5f620005015f1984600802620004e4565b1980831691505092915050565b5f6200051b8383620004f0565b9150826002028217905092915050565b6200053682620002fd565b67ffffffffffffffff811115620005525762000551620000d2565b5b6200055e825462000334565b6200056b82828562000494565b5f60209050601f831160018114620005a1575f84156200058c578287015190505b6200059885826200050e565b86555062000607565b601f198416620005b18662000368565b5f5b82811015620005da57848901518255600182019150602085019450602081019050620005b3565b86831015620005fa5784890151620005f6601f891682620004f0565b8355505b6001600288020188555050505b505050505050565b6108a7806200061d5f395ff3fe60806040526004361061006f575f3560e01c80638da5cb5b1161004d5780638da5cb5b146100f1578063c59ee1dc1461011b578063d7bb99ba14610145578063e924796b1461014f5761006f565b806340193883146100735780634a79d50c1461009d5780637284e416146100c7575b5f80fd5b34801561007e575f80fd5b50610087610165565b60405161009491906104ad565b60405180910390f35b3480156100a8575f80fd5b506100b161016b565b6040516100be9190610550565b60405180910390f35b3480156100d2575f80fd5b506100db6101f7565b6040516100e89190610550565b60405180910390f35b3480156100fc575f80fd5b50610105610283565b60405161011291906105af565b60405180910390f35b348015610126575f80fd5b5061012f6102a6565b60405161013c91906104ad565b60405180910390f35b61014d6102ac565b005b34801561015a575f80fd5b5061016361035a565b005b60035481565b60018054610178906105f5565b80601f01602080910402602001604051908101604052809291908181526020018280546101a4906105f5565b80156101ef5780601f106101c6576101008083540402835291602001916101ef565b820191905f5260205f20905b8154815290600101906020018083116101d257829003601f168201915b505050505081565b60028054610204906105f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610230906105f5565b801561027b5780601f106102525761010080835404028352916020019161027b565b820191905f5260205f20905b81548152906001019060200180831161025e57829003601f168201915b505050505081565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b5f34116102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e590610695565b60405180910390fd5b600354346004546102ff91906106e0565b1115610340576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103379061075d565b60405180910390fd5b3460045f82825461035191906106e0565b92505081905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de906107eb565b60405180910390fd5b600354600454101561042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042590610853565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60045490811502906040515f60405180830381858888f19350505050158015610492573d5f803e3d5ffd5b50565b5f819050919050565b6104a781610495565b82525050565b5f6020820190506104c05f83018461049e565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156104fd5780820151818401526020810190506104e2565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610522826104c6565b61052c81856104d0565b935061053c8185602086016104e0565b61054581610508565b840191505092915050565b5f6020820190508181035f8301526105688184610518565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61059982610570565b9050919050565b6105a98161058f565b82525050565b5f6020820190506105c25f8301846105a0565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061060c57607f821691505b60208210810361061f5761061e6105c8565b5b50919050565b7f436f6e747269627574696f6e20616d6f756e74206d75737420626520677265615f8201527f746572207468616e203000000000000000000000000000000000000000000000602082015250565b5f61067f602a836104d0565b915061068a82610625565b604082019050919050565b5f6020820190508181035f8301526106ac81610673565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6106ea82610495565b91506106f583610495565b925082820190508082111561070d5761070c6106b3565b5b92915050565b7f476f616c20686173206265656e207265616368656400000000000000000000005f82015250565b5f6107476015836104d0565b915061075282610713565b602082019050919050565b5f6020820190508181035f8301526107748161073b565b9050919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e5f8201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b5f6107d56025836104d0565b91506107e08261077b565b604082019050919050565b5f6020820190508181035f830152610802816107c9565b9050919050565b7f476f616c20686173206e6f74206265656e2072656163686564000000000000005f82015250565b5f61083d6019836104d0565b915061084882610809565b602082019050919050565b5f6020820190508181035f83015261086a81610831565b905091905056fea2646970667358221220c6cb2e2b949de124758854f95db8b6ea0118b3da7c52b5d0973f3d6036a366a564736f6c63430008140033";
const registryAddress = "0x1afAe103DFb389ee1d5e53E610F624c8B4f75927";
const FundraiserABI = abi.FundraiserABI;
const FundraiserRegistryABI = abi.FundraiserRegistryABI;

// Middleware
app.use(bodyParser.json());
app.use(cors());

// Routes
app.get("/", (req, res) => {
  res.send("Welcome to the Fundraising dApp backend!");
});

app.post("/register", async (req, res) => {
  const userData = req.body;

  try {
    const client = await MongoClient.connect(url);
    const db = client.db(dbName);

    const existingUser = await db
      .collection("Users")
      .findOne({ userName: userData.userName });
    if (existingUser) {
      return res.status(409).json({ error: "User already exists" });
    }

    const result = await db.collection("Users").insertOne(userData);

    res.status(201).json({
      message: "User registered successfully",
      userId: result.insertedId,
    });

    client.close();
  } catch (error) {
    console.error("Error during user registration:", error);
    res.status(500).json({ error: "An error occurred during registration" });
  }
});

app.post("/login", async (req, res) => {
  const { userName, password } = req.body;
  console.log(userName, password);
  try {
    // Connect to the MongoDB database
    const client = await MongoClient.connect(url);
    const db = client.db(dbName);

    // Find the user in the 'users' collection based on the email
    const user = await db.collection("Users").findOne({ userName });
    console.log("user: " + user);
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    // Check if the provided password matches the user's stored password
    // You should use a secure password hashing library here (e.g., bcrypt)
    if (user.password !== password) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    // Return a success response to the client
    res.status(200).json({ message: "Login successful" });

    // Close the MongoDB connection
    client.close();
  } catch (error) {
    console.error("Error during login:", error);
    res.status(500).json({ error: "An error occurred during login" });
  }
});

app.get("/getID/:username", async (req, res) => {
  const userName = req.params.username;
  try {
    // Connect to the MongoDB database
    const client = await MongoClient.connect(url);
    const db = client.db(dbName);

    // Find the user in the 'users' collection based on the email
    const user = await db.collection("Users").findOne({ userName: userName });

    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    // Return the user's unique ID to the client
    console.log(user._id);
    res.status(200).json({ userId: user._id });

    // Close the MongoDB connection
    client.close();
  } catch (error) {
    console.error("Error while fetching user ID:", error);
    res.status(500).json({ error: "An error occurred while fetching user ID" });
  }
});

app.post("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error("Error during logout:", err);
      return res.status(500).json({ error: "An error occurred during logout" });
    }

    // Return a success response to the client
    res.status(200).json({ message: "Logout successful" });
  });
});

app.post("/create-fundraiser", async (req, res) => {
  try {
    const { title, description, goal } = req.body;

    const provider = new HDWalletProvider(mnemonic, infuraKey);
    const web3 = new Web3(provider);

    const accounts = await web3.eth.getAccounts();

    const fundraiserContract = new web3.eth.Contract(FundraiserABI);
    const deployTransaction = fundraiserContract.deploy({
      data: fundraiserByteCode, // Replace with the compiled bytecode of the fundraiser contract
      arguments: [title, description, goal],
    });

    const gas = await deployTransaction.estimateGas({ from: accounts[0] });

    const options = {
      from: accounts[0],
      gas,
    };

    const deployedContract = await deployTransaction.send({
      ...options,
      gasPrice: await web3.eth.getGasPrice(),
    });

    const registryContract = new web3.eth.Contract(
      FundraiserRegistryABI,
      registryAddress
    );
    const addContractTransaction = registryContract.methods.registerFundraiser(
      deployedContract.options.address
    );

    const addGas = await addContractTransaction.estimateGas({
      from: accounts[0],
    });

    const addOptions = {
      from: accounts[0],
      gas: addGas,
    };

    await addContractTransaction.send({
      ...addOptions,
      gasPrice: await web3.eth.getGasPrice(),
    });

    res.status(200).json({ contractAddress: deployedContract.options.address });
  } catch (error) {
    console.error("Error during contract creation:", error);
    res
      .status(500)
      .json({ error: "An error occurred during contract creation" });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
